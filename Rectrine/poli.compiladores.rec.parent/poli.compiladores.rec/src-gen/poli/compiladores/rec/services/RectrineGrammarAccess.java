/*
 * generated by Xtext 2.12.0
 */
package poli.compiladores.rec.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RectrineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.Program");
		private final Assignment cEntidadesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntidadesEntidadeParserRuleCall_0 = (RuleCall)cEntidadesAssignment.eContents().get(0);
		
		//// -----------------------------------------------------------------------------------------
		//Program:
		//	entidades+=Entidade*;
		@Override public ParserRule getRule() { return rule; }
		
		//entidades+=Entidade*
		public Assignment getEntidadesAssignment() { return cEntidadesAssignment; }
		
		//Entidade
		public RuleCall getEntidadesEntidadeParserRuleCall_0() { return cEntidadesEntidadeParserRuleCall_0; }
	}
	public class EntidadeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.Entidade");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCamposAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCamposCampoParserRuleCall_3_0 = (RuleCall)cCamposAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entidade:
		//	"entity" name=ID '{' campos+=Campo* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"entity" name=ID '{' campos+=Campo* '}'
		public Group getGroup() { return cGroup; }
		
		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//campos+=Campo*
		public Assignment getCamposAssignment_3() { return cCamposAssignment_3; }
		
		//Campo
		public RuleCall getCamposCampoParserRuleCall_3_0() { return cCamposCampoParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CampoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.Campo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTipoAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTipoTIPOTerminalRuleCall_2_0_0 = (RuleCall)cTipoAssignment_2_0.eContents().get(0);
		private final Assignment cRelAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRelLigacaoParserRuleCall_2_1_0 = (RuleCall)cRelAssignment_2_1.eContents().get(0);
		
		//Campo:
		//	name=ID ':' (tipo=TIPO | rel=Ligacao);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (tipo=TIPO | rel=Ligacao)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//tipo=TIPO | rel=Ligacao
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//tipo=TIPO
		public Assignment getTipoAssignment_2_0() { return cTipoAssignment_2_0; }
		
		//TIPO
		public RuleCall getTipoTIPOTerminalRuleCall_2_0_0() { return cTipoTIPOTerminalRuleCall_2_0_0; }
		
		//rel=Ligacao
		public Assignment getRelAssignment_2_1() { return cRelAssignment_2_1; }
		
		//Ligacao
		public RuleCall getRelLigacaoParserRuleCall_2_1_0() { return cRelLigacaoParserRuleCall_2_1_0; }
	}
	public class LigacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.Ligacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnt1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEnt1EntidadeCrossReference_0_0 = (CrossReference)cEnt1Assignment_0.eContents().get(0);
		private final RuleCall cEnt1EntidadeIDTerminalRuleCall_0_0_1 = (RuleCall)cEnt1EntidadeCrossReference_0_0.eContents().get(1);
		private final Assignment cMul1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMul1MULTTerminalRuleCall_1_0 = (RuleCall)cMul1Assignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMul2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMul2MULTTerminalRuleCall_3_0 = (RuleCall)cMul2Assignment_3.eContents().get(0);
		private final Assignment cEnt2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEnt2EntidadeCrossReference_4_0 = (CrossReference)cEnt2Assignment_4.eContents().get(0);
		private final RuleCall cEnt2EntidadeIDTerminalRuleCall_4_0_1 = (RuleCall)cEnt2EntidadeCrossReference_4_0.eContents().get(1);
		
		//Ligacao:
		//	ent1=[Entidade] mul1=MULT "->" mul2=MULT ent2=[Entidade];
		@Override public ParserRule getRule() { return rule; }
		
		//ent1=[Entidade] mul1=MULT "->" mul2=MULT ent2=[Entidade]
		public Group getGroup() { return cGroup; }
		
		//ent1=[Entidade]
		public Assignment getEnt1Assignment_0() { return cEnt1Assignment_0; }
		
		//[Entidade]
		public CrossReference getEnt1EntidadeCrossReference_0_0() { return cEnt1EntidadeCrossReference_0_0; }
		
		//ID
		public RuleCall getEnt1EntidadeIDTerminalRuleCall_0_0_1() { return cEnt1EntidadeIDTerminalRuleCall_0_0_1; }
		
		//mul1=MULT
		public Assignment getMul1Assignment_1() { return cMul1Assignment_1; }
		
		//MULT
		public RuleCall getMul1MULTTerminalRuleCall_1_0() { return cMul1MULTTerminalRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//mul2=MULT
		public Assignment getMul2Assignment_3() { return cMul2Assignment_3; }
		
		//MULT
		public RuleCall getMul2MULTTerminalRuleCall_3_0() { return cMul2MULTTerminalRuleCall_3_0; }
		
		//ent2=[Entidade]
		public Assignment getEnt2Assignment_4() { return cEnt2Assignment_4; }
		
		//[Entidade]
		public CrossReference getEnt2EntidadeCrossReference_4_0() { return cEnt2EntidadeCrossReference_4_0; }
		
		//ID
		public RuleCall getEnt2EntidadeIDTerminalRuleCall_4_0_1() { return cEnt2EntidadeIDTerminalRuleCall_4_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final EntidadeElements pEntidade;
	private final CampoElements pCampo;
	private final LigacaoElements pLigacao;
	private final TerminalRule tTIPO;
	private final TerminalRule tMULT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RectrineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pEntidade = new EntidadeElements();
		this.pCampo = new CampoElements();
		this.pLigacao = new LigacaoElements();
		this.tTIPO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.TIPO");
		this.tMULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "poli.compiladores.rec.Rectrine.MULT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("poli.compiladores.rec.Rectrine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// -----------------------------------------------------------------------------------------
	//Program:
	//	entidades+=Entidade*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Entidade:
	//	"entity" name=ID '{' campos+=Campo* '}';
	public EntidadeElements getEntidadeAccess() {
		return pEntidade;
	}
	
	public ParserRule getEntidadeRule() {
		return getEntidadeAccess().getRule();
	}
	
	//Campo:
	//	name=ID ':' (tipo=TIPO | rel=Ligacao);
	public CampoElements getCampoAccess() {
		return pCampo;
	}
	
	public ParserRule getCampoRule() {
		return getCampoAccess().getRule();
	}
	
	//Ligacao:
	//	ent1=[Entidade] mul1=MULT "->" mul2=MULT ent2=[Entidade];
	public LigacaoElements getLigacaoAccess() {
		return pLigacao;
	}
	
	public ParserRule getLigacaoRule() {
		return getLigacaoAccess().getRule();
	}
	
	//terminal TIPO:
	//	"integer" | "string" | "boolean" | "datetime";
	public TerminalRule getTIPORule() {
		return tTIPO;
	}
	
	//terminal MULT:
	//	"one" | "many";
	public TerminalRule getMULTRule() {
		return tMULT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
