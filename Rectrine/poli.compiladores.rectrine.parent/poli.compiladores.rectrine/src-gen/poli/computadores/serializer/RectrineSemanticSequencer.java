/*
 * generated by Xtext 2.12.0
 */
package poli.computadores.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import poli.computadores.rectrine.Campo;
import poli.computadores.rectrine.Entidade;
import poli.computadores.rectrine.Ligacao;
import poli.computadores.rectrine.Program;
import poli.computadores.rectrine.RectrinePackage;
import poli.computadores.services.RectrineGrammarAccess;

@SuppressWarnings("all")
public class RectrineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RectrineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RectrinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RectrinePackage.CAMPO:
				sequence_Campo(context, (Campo) semanticObject); 
				return; 
			case RectrinePackage.ENTIDADE:
				sequence_Entidade(context, (Entidade) semanticObject); 
				return; 
			case RectrinePackage.LIGACAO:
				sequence_Ligacao(context, (Ligacao) semanticObject); 
				return; 
			case RectrinePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Campo returns Campo
	 *
	 * Constraint:
	 *     (name=ID (tipo=TIPO | rel=Ligacao))
	 */
	protected void sequence_Campo(ISerializationContext context, Campo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entidade returns Entidade
	 *
	 * Constraint:
	 *     (name=ID campos+=Campo*)
	 */
	protected void sequence_Entidade(ISerializationContext context, Entidade semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ligacao returns Ligacao
	 *
	 * Constraint:
	 *     (ent1=[Entidade|ID] mul1=MULT mul2=MULT ent2=[Entidade|ID])
	 */
	protected void sequence_Ligacao(ISerializationContext context, Ligacao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RectrinePackage.Literals.LIGACAO__ENT1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RectrinePackage.Literals.LIGACAO__ENT1));
			if (transientValues.isValueTransient(semanticObject, RectrinePackage.Literals.LIGACAO__MUL1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RectrinePackage.Literals.LIGACAO__MUL1));
			if (transientValues.isValueTransient(semanticObject, RectrinePackage.Literals.LIGACAO__MUL2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RectrinePackage.Literals.LIGACAO__MUL2));
			if (transientValues.isValueTransient(semanticObject, RectrinePackage.Literals.LIGACAO__ENT2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RectrinePackage.Literals.LIGACAO__ENT2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLigacaoAccess().getEnt1EntidadeIDTerminalRuleCall_0_0_1(), semanticObject.eGet(RectrinePackage.Literals.LIGACAO__ENT1, false));
		feeder.accept(grammarAccess.getLigacaoAccess().getMul1MULTTerminalRuleCall_1_0(), semanticObject.getMul1());
		feeder.accept(grammarAccess.getLigacaoAccess().getMul2MULTTerminalRuleCall_3_0(), semanticObject.getMul2());
		feeder.accept(grammarAccess.getLigacaoAccess().getEnt2EntidadeIDTerminalRuleCall_4_0_1(), semanticObject.eGet(RectrinePackage.Literals.LIGACAO__ENT2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     entidades+=Entidade+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
