/**
 * generated by Xtext 2.12.0
 */
package poli.computadores.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import poli.computadores.rectrine.Campo;
import poli.computadores.rectrine.Entidade;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RectrineGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entidade> _iterable = IteratorExtensions.<Entidade>toIterable(Iterators.<Entidade>filter(resource.getAllContents(), Entidade.class));
    for (final Entidade e : _iterable) {
      String _name = e.getName();
      String _plus = (_name + ".php");
      fsa.generateFile(_plus, this.compile(e));
    }
  }
  
  public CharSequence compile(final Entidade E) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?php");
    _builder.newLine();
    _builder.newLine();
    _builder.append("use Doctrine\\ORM\\Mapping as ORM");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* @ORM\\Entity");
    _builder.newLine();
    _builder.append("* @ORM\\Table(name=\"");
    String _name = E.getName();
    _builder.append(_name);
    _builder.append("\", options={\"collate\" => \"utf8mb4_general_ci\", \"charset\" => \"utf8mb4\"})");
    _builder.newLineIfNotEmpty();
    _builder.append("**/");
    _builder.newLine();
    _builder.append("class ");
    String _name_1 = E.getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Campo> _campos = E.getCampos();
      boolean _hasElements = false;
      for(final Campo C : _campos) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "    ");
        }
        {
          boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(C.getTipo());
          if (_isNullOrEmpty) {
            _builder.append("    ");
            _builder.append("/**");
            _builder.newLine();
            {
              String _name_2 = C.getRel().getEnt1().getName();
              String _name_3 = E.getName();
              boolean _equals = Objects.equal(_name_2, _name_3);
              if (_equals) {
                _builder.append("    ");
                _builder.append("* @ORM\\");
                String _firstUpper = StringExtensions.toFirstUpper(C.getRel().getMul1());
                _builder.append(_firstUpper, "    ");
                _builder.append("To");
                String _firstUpper_1 = StringExtensions.toFirstUpper(C.getRel().getMul2());
                _builder.append(_firstUpper_1, "    ");
                _builder.append("(targetEntity=\"");
                String _name_4 = C.getRel().getEnt2().getName();
                _builder.append(_name_4, "    ");
                _builder.append("\", inversedBy=\"");
                String _lowerCase = E.getName().toLowerCase();
                _builder.append(_lowerCase, "    ");
                _builder.append("\", fetch\"EXTRA_LAZY)");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("    ");
                _builder.append("* @ORM\\");
                String _firstUpper_2 = StringExtensions.toFirstUpper(C.getRel().getMul1());
                _builder.append(_firstUpper_2, "    ");
                _builder.append("To");
                String _firstUpper_3 = StringExtensions.toFirstUpper(C.getRel().getMul2());
                _builder.append(_firstUpper_3, "    ");
                _builder.append("(targetEntity=\"");
                String _name_5 = C.getRel().getEnt2().getName();
                _builder.append(_name_5, "    ");
                _builder.append("\", mappedBy=\"");
                String _lowerCase_1 = E.getName().toLowerCase();
                _builder.append(_lowerCase_1, "    ");
                _builder.append("\", fetch\"EXTRA_LAZY)");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("    ");
            _builder.append("**/");
            _builder.newLine();
          }
        }
        {
          boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(C.getTipo());
          boolean _not = (!_isNullOrEmpty_1);
          if (_not) {
            _builder.append("    ");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("* @ORM\\Column(name=\"");
            String _name_6 = C.getName();
            _builder.append(_name_6, "    ");
            _builder.append("\", type=\"");
            String _tipo = C.getTipo();
            _builder.append(_tipo, "    ");
            _builder.append("\", nullable=false)");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("**/");
            _builder.newLine();
          }
        }
        _builder.append("    ");
        _builder.append("private $");
        String _name_7 = C.getName();
        _builder.append(_name_7, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" ");
    _builder.newLine();
    _builder.append("    ");
    CharSequence _set = this.getset(E);
    _builder.append(_set, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getset(final Entidade E) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Campo> _campos = E.getCampos();
      boolean _hasElements = false;
      for(final Campo C : _campos) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate("\n", "");
        }
        _builder.append("public function get");
        String _firstUpper = StringExtensions.toFirstUpper(C.getName());
        _builder.append(_firstUpper);
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("{ ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("return $this->");
        String _name = C.getName();
        _builder.append(_name, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        {
          if ((((!StringExtensions.isNullOrEmpty(C.getTipo())) || (!Objects.equal(C.getRel().getMul1(), "many"))) || (!Objects.equal(C.getRel().getMul2(), "many")))) {
            _builder.append("public function set");
            String _firstUpper_1 = StringExtensions.toFirstUpper(C.getName());
            _builder.append(_firstUpper_1);
            _builder.append("($");
            String _name_1 = C.getName();
            _builder.append(_name_1);
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("{ ");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("$this->");
            String _name_2 = C.getName();
            _builder.append(_name_2, "    ");
            _builder.append(" = $");
            String _name_3 = C.getName();
            _builder.append(_name_3, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          } else {
            _builder.append("public function add");
            String _firstUpper_2 = StringExtensions.toFirstUpper(C.getName());
            _builder.append(_firstUpper_2);
            _builder.append("($");
            String _name_4 = C.getName();
            _builder.append(_name_4);
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("{ ");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("$this->");
            String _name_5 = C.getName();
            _builder.append(_name_5, "    ");
            _builder.append("[] = $");
            String _name_6 = C.getName();
            _builder.append(_name_6, "    ");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
}
